@using MoviePro.Models
@inject IJSRuntime JS

@if (Movie is not null)
{
	<div class="card h-100 fade-in" @ref="posterCardElement">
		@if (string.IsNullOrEmpty(Movie.PosterPath))
		{
			<img class="card-image-top" alt="Movie Poster" src="/images/PosterPlaceHolder.png" />
		}
		else
		{
			<img class="card-img-top" alt="Movie Poster" src="@($"https://image.tmdb.org/t/p/w500/{Movie.PosterPath}")" />
		}
		<div class="card-body border-top bg-light">
			<h5 class="card-title">@Movie.Title</h5>
			<p class="card-text">
				@DateTime.Parse(Movie.ReleaseDate).ToString("MMMM dd, yyyy")
			</p>
		</div>
		<div class="card-footer text-end">
			<a class="btn btn-primary" href="/movie/@Movie.Id">Details</a>
		</div>
	</div>
}
else
{
	<div class="card h-100">
		<img class="card-img-top" alt="Movie Poster" src="/images/PosterPlaceHolder.png" />
		<div class="card-body border-top bg-light">
			<h5 class="card-title progress" role="progressbar">
				<span class="bg-info progress-bar progress-bar-striped progress-bar-animated" style="width: 50%">Loading...</span>
			</h5>
			<p class="card-text progress" role="progressbar">
				<span class="bg-warning progress-bar progress-bar-striped progress-bar-animated" style="width: 80%">Loading...</span>
			</p>
		</div>
		<div class="card-footer text-end">
			<button class="btn btn-danger disabled placeholder col-6">
				Loading...
			</button>
		</div>
	</div>
}

@code {

	private ElementReference posterCardElement;

	[Parameter]
	public PopularMovie? Movie { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JS.InvokeVoidAsync("VanillaTilt.init", posterCardElement, new
			{
				startX = 0,
				startY = 0,
				max = 15,
				speed = 300,
				reset = true,
				glare = true,
			});
		}
	}

	public void Dispose()
	{
		JS.InvokeVoidAsync("VanillaTilt.init", posterCardElement);
	}
}
